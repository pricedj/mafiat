import numpy as np

from mafiat import twist

def test_calc_vhat():
    assert twist.calc_vhat(0, 0, 0, 1, 0, 0) == (1.0, 0.0, 0.0)
    assert twist.calc_vhat(0, 0, 0, 0, 1, 0) == (0.0, 1.0, 0.0)
    assert twist.calc_vhat(0, 0, 0, 0, 0, 1) == (0.0, 0.0, 1.0)
    assert twist.calc_vhat(0, 0, 0, 0, -1, 0) == (0.0, -1.0, 0.0)

def test_find_V():
    assert twist.find_V([[0], [0], [0]], [[1], [0], [0]],
                        [[0, 1, 0]], 1, 30) == ([(1.0, 0.0, 0.0)], [0.0], [0])
    axis1 = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 0, 0, 0]]
    fl1 = [[1, 0, -1, 0], [0, 1, 2, 3], [0, 1, 0, -1]]
    bhat1 = [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]]
    target1 = ([(1.0, 0.0, 0.0), (0.0, 0.0, 1.0), (-1.0, 0.0, 0.0), (0.0, 0.0, -1.0)],
               [0.0, 0.0, 0.0, 0.0], [0, 1, 2, 3])
    assert twist.find_V(axis1, fl1, bhat1, 1, 90) == target1

def test_calc_s():
    np.testing.assert_allclose(twist.calc_s([[0, 0], [0, 1], [0, 1]]),
                                            [0, 1.41421356], 1e-8)

def test_calc_dVds():
    s_arc1 = [0, 1, 2]
    vhat1 = [(1.0, 0.0, 0.0), (0.0, 0.0, 1.0), (-1.0, 0.0, 0.0)]
    target1 = ([(-1.0, 0.0, 1.0), (-1.0, 0.0, 0.0), (-1.0, 0.0, -1.0)],
               [(-1.0, 0.0, 1.0), (-2.0, 0.0, 0.0), (-1.0, 0.0, -1.0)],
               [1, 1, 1])
    assert twist.calc_dVds(vhat1, s_arc1) == target1

def test_calc_Tg():
    axis1 = [[0]*10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0]*10]
    bhat1 = [[0, 1, 0]]*10
    vhat1 = [[[1.0, 0.0, 0.0], [0.999847695156, 0.0, 0.0174524064373],
              [0.999390827019, 0.0, 0.0348994967025], [0.998629534755, 0.0, 0.0523359562429],
              [0.99756405026, 0.0, 0.0697564737441], [0.996194698092, 0.0, 0.0871557427477],
              [0.994521895368, 0.0, 0.104528463268], [0.992546151641, 0.0, 0.121869343405],
              [0.990268068742, 0.0, 0.13917310096], [0.987688340595, 0.0, 0.15643446504]]]
    np.testing.assert_almost_equal(twist.calc_Tg(bhat1, vhat1, axis1)[0],
                                   -0.027777, 1e-6)
